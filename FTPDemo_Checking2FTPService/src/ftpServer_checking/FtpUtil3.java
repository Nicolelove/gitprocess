package ftpServer_checking;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.net.SocketException;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPFile;

public class FtpUtil3 {

	private FTPClient ftpClient = new FTPClient();
	public static final int BINARY_FILE_TYPE = FTP.BINARY_FILE_TYPE;
	public static final int ASCII_FILE_TYPE = FTP.ASCII_FILE_TYPE;
	private String local_fileEncoding = System.getProperty("file.encoding");

	/**
	 * ä½¿ç”¨è¯¦ç»†ä¿¡æ?¯è¿›è¡Œæœ?åŠ¡å™¨è¿žæŽ¥
	 * 
	 * @param serverï¼šæœ?åŠ¡å™¨åœ°å?€å??ç§°
	 * @param portï¼šç«¯å?£å?·
	 * @param userï¼šç”¨æˆ·å??
	 * @param passwordï¼šç”¨æˆ·å¯†ç ?
	 * @param pathï¼šè½¬ç§»åˆ°FTPæœ?åŠ¡å™¨ç›®å½•
	 * @param isNew
	 *            true è¡¨ç¤ºè¿žæŽ¥åˆ°new server ,false è¡¨ç¤ºold server
	 * @return
	 * @throws SocketException
	 * @throws IOException
	 */
	public FTPClient connectServer(String server, int port, String user, String password, String path, boolean isNew)
			throws SocketException, IOException {
		ftpClient = new FTPClient();
		ftpClient.connect(server, port);
		if (ftpClient.login(user, password)) {
//			System.err.println("FTP server refused login.");
//			System.exit(1);
			if (isNew) {
				System.out.println("Login New Server : " + server + "." + " --passed");
			} else {
				System.out.println("Login Old Server : " + server + "." + " --passed");
			}
		}else{
			if (isNew) {
				System.err.println("Login New Server : " + server + "." + " --No pass");
				System.exit(1);
			} else {
				System.err.println("Login Old Server : " + server + "." + " --No pass");
				System.exit(1);
			}
		}

		if (path != null && path.length() != 0) {
			ftpClient.changeWorkingDirectory(path);
		}
		ftpClient.setBufferSize(1024);// è®¾ç½®ä¸Šä¼ ç¼“å­˜å¤§å°?
		// String encoding = System.getProperty("file.encoding"); //èŽ·å?–ç³»ç»Ÿé»˜è®¤ç¼–ç ?æ ¼å¼?
		ftpClient.setControlEncoding(local_fileEncoding);// è®¾ç½®ç¼–ç ?
		FTPClientConfig ftpClientConfig = new FTPClientConfig(FTPClientConfig.SYST_NT);
		ftpClientConfig.setServerLanguageCode("zh");
		ftpClient.setFileType(BINARY_FILE_TYPE);// è®¾ç½®æ–‡ä»¶ç±»åž‹,é»˜è®¤ä½¿ç”¨çš„æ˜¯ASCIIç¼–ç ?çš„,å¯¹äºŽä¼ è¾“å›¾ç‰‡å¿…é¡»æ˜¯äºŒè¿›åˆ¶æ–‡ä»¶ï¼Œå?¦åˆ™ä¸Šä¼ å›¾ç‰‡ä¼šæ˜¯ä¸€ç‰‡å½©è‰²

		return ftpClient;
	}
	
	

	/**
	 * è®¾ç½®ä¼ è¾“æ–‡ä»¶ç±»åž‹:FTP.BINARY_FILE_TYPE | FTP.ASCII_FILE_TYPE äºŒè¿›åˆ¶æ–‡ä»¶æˆ–æ–‡æœ¬æ–‡ä»¶
	 * 
	 * @param fileType
	 * @throws IOException
	 */
	public void setFileType(int fileType) throws IOException {
		ftpClient.setFileType(fileType);
	}

	/**
	 * å…³é—­è¿žæŽ¥
	 * 
	 * @throws IOException
	 */
	public void closeServer() throws IOException {
		if (ftpClient != null && ftpClient.isConnected()) {
			ftpClient.logout();// é€€å‡ºFTPæœ?åŠ¡å™¨
			ftpClient.disconnect();// å…³é—­FTPè¿žæŽ¥
		}
	}
	
	public void closeServer(FTPClient ftpClientOld,FTPClient ftpClientNew) throws IOException {
		if (ftpClientOld != null && ftpClientOld.isConnected()) {
			ftpClientOld.logout();// é€€å‡ºFTPæœ?åŠ¡å™¨
			ftpClientOld.disconnect();// å…³é—­FTPè¿žæŽ¥
		}
		if (ftpClientNew != null && ftpClientNew.isConnected()) {
			ftpClientNew.logout();// é€€å‡ºFTPæœ?åŠ¡å™¨
			ftpClientNew.disconnect();// å…³é—­FTPè¿žæŽ¥
		}
		System.out.println("logout----");
	}

	/**
	 * è½¬ç§»åˆ°FTPæœ?åŠ¡å™¨å·¥ä½œç›®å½•
	 * 
	 * @param path
	 *            æŒ‡å®šå·¥ä½œç›®å½•
	 * @return
	 * @throws IOException
	 */
	public boolean changeDirectory(String path) throws IOException {
		return ftpClient.changeWorkingDirectory(path);
	}

	/**
	 * åˆ é™¤æœ?åŠ¡å™¨ä¸Šçš„æ–‡ä»¶
	 * 
	 * @param pathName
	 *            æŒ‡å®šåˆ é™¤æ–‡ä»¶ç›®å½•
	 * @return
	 * @throws IOException
	 */
	public void deleteFile(String pathName) throws IOException {
		String path = "";
		pathName = replace2Fileseparator(pathName);
		if (pathName.indexOf(File.separator) > -1) {
			path = pathName.substring(0, pathName.lastIndexOf(File.separator));
			if (path != null && !path.equals("")) {
				// å¯¹äºŽåˆ é™¤é?žæ ¹æ­¢å½•ä¸‹çš„æ–‡ä»¶ï¼Œåº”è¯¥å…ˆè½¬åˆ°ç›¸åº”çš„ç›®å½•ä¸‹æ‰?å?¯ä»¥åˆ é™¤æ–‡ä»¶
				ftpClient.changeWorkingDirectory(new String(path.getBytes(), FTP.DEFAULT_CONTROL_ENCODING));
			}
		}
		if (ftpClient.deleteFile(new String(pathName.getBytes(local_fileEncoding), FTP.DEFAULT_CONTROL_ENCODING))) {
			System.out.println("delete ftp file: " + pathName + "  -- passed");
		} else {
			System.err.println("delete ftp file: " + pathName + "  -- No pass");
			System.exit(1);
		}
	}

	/**
	 * ä¸Šä¼ æ–‡ä»¶åˆ°ftpæœ?åŠ¡å™¨ åœ¨è¿›è¡Œä¸Šä¼ å’Œä¸‹è½½æ–‡ä»¶çš„æ—¶å€™ï¼Œè®¾ç½®æ–‡ä»¶çš„ç±»åž‹æœ€å¥½æ˜¯ï¼š
	 * ftpUtil.setFileType(FtpUtil.BINARY_FILE_TYPE)
	 * 
	 * @param localFilePath
	 *            æœ¬åœ°æ–‡ä»¶è·¯å¾„å’Œå??ç§°
	 * @param remoteFileName
	 *            æœ?åŠ¡å™¨æ–‡ä»¶å??ç§°
	 * @param isRename
	 *            æ˜¯å?¦é‡?å‘½å??
	 * @return
	 * @throws IOException
	 */
	public boolean uploadFile(String localFilePath, String remoteFileName, boolean isRename) throws IOException {
		boolean flag = false;
		InputStream iStream = null; // å»ºç«‹ä¸€ä¸ªæ–‡ä»¶è¾“å‡ºæµ?å¯¹è±¡
		localFilePath = replace2Fileseparator(localFilePath); // é¢„å¤„ç?†è·¯å¾„
		remoteFileName = replace2Fileseparator(remoteFileName);
		try {
			if (remoteFileName == null || remoteFileName.equals("")) {
				// ftpClient.changeWorkingDirectory("/");
				ftpClient.changeWorkingDirectory(File.separator);
				remoteFileName = localFilePath.substring(localFilePath.lastIndexOf(File.separator));
			} else if (!remoteFileName.contains(File.separator)) {
				ftpClient.changeWorkingDirectory(File.separator);
			} else {
				if(new File(remoteFileName).isDirectory()){
					ftpClient.changeWorkingDirectory(new String(remoteFileName.getBytes(local_fileEncoding), FTP.DEFAULT_CONTROL_ENCODING));
				}else{
					ftpClient.changeWorkingDirectory(
							new String(remoteFileName.substring(0, remoteFileName.lastIndexOf(File.separator))
									.getBytes(local_fileEncoding), FTP.DEFAULT_CONTROL_ENCODING));
				}
			}
			
			iStream = new FileInputStream(localFilePath);
			// æˆ‘ä»¬å?¯ä»¥ä½¿ç”¨BufferedInputStreamè¿›è¡Œå°?è£…
			BufferedInputStream bis = new BufferedInputStream(iStream);
			// utf-8,è¿™ä¸ªä¸?æ˜¯å›ºå®šçš„å€¼ï¼Œæ˜¯æ ¹æ?®ç³»ç»Ÿæœ¬èº«é»˜è®¤çš„ç¼–ç ?æ?¥å®šçš„
			flag = ftpClient.storeFile(
					new String(remoteFileName.getBytes(local_fileEncoding), FTP.DEFAULT_CONTROL_ENCODING), bis); // å°†Bisè¾“å…¥æµ?çš„ä¸œè¥¿ä¸Šä¼ åˆ°ftpæœ?åŠ¡å™¨çš„fileNameæ–‡ä»¶ä¸­ï¼Œåœ¨è¿™é‡Œæˆ‘ä»¬å¯¹fileNameæ–‡ä»¶å??è¿›è¡Œäº†è½¬ç ?,è§£å†³äº†ä¸­æ–‡æ–‡ä»¶å??ä¸?èƒ½ä¸Šä¼ çš„é—®é¢˜
			if (flag) {
				if (!isRename) {
					System.out.println("upload file to new server: " + remoteFileName + "  -- passed");
				} else {
					System.out.println("upload and rename ftp file name , from: "
							+ localFilePath.substring(localFilePath.lastIndexOf(File.separator)+1) + " To "
							+ remoteFileName + "  -- passed");
				}
			} else {
				if (!isRename) {
					System.err.println("upload file to new server: " + remoteFileName + "  -- NO pass");
				} else {
					System.err.println("upload and rename ftp file name, from : "
							+ localFilePath.substring(localFilePath.lastIndexOf(File.separator)+1) + " To "
							+ remoteFileName + "  -- No pass");
				}
				System.exit(1);
			}
		} catch (IOException e) {
			System.err.println(localFilePath+"localFilePath to upload not exist!  --No pass");
			flag = false;
			return flag;
		} finally {
			if (iStream != null) {
				iStream.close();
			}
		}
		return flag;
	}

	/**
	 * 
	 * ä»Žftpæœ?åŠ¡å™¨ä¸Šä¸‹è½½æ–‡ä»¶åˆ°æœ¬åœ°
	 * 
	 * @param fileDirPath
	 *            æœ?åŠ¡å™¨æ–‡ä»¶æ‰€åœ¨è·¯å¾„
	 * @param remoteFileName
	 *            ä¸‹è½½æ–‡ä»¶å??
	 * @param localFileName
	 *            æœ¬åœ°å­˜æ”¾è·¯å¾„
	 * @return
	 * @throws IOException
	 */
	public boolean download(String fileDirPath, String remoteFileName, String localFileName) throws IOException {
		boolean flag = false;
		if (localFileName != null && !localFileName.equals("")) {
			fileDirPath = replace2Fileseparator(fileDirPath);
			localFileName = replace2Fileseparator(localFileName);
			// FileOutputStream fos1=new FileOutputStream(localFileName,false);
			// trueè¡¨ç¤ºå¦‚æžœæ–‡ä»¶å·²ç»?å­˜åœ¨ï¼Œæ¯?æ‰§è¡Œç¨‹åº?ä¸€æ¬¡ä¾¿å¾€æ–‡ä»¶è¿½åŠ ä¸€æ¬¡å†…å®¹ï¼Œå?¦åˆ™ä¼šæ¯?ä¸€æ¬¡çš„æ‰§è¡Œç»“æžœä¼šè¦†ç›–æ–‡ä»¶ä¸Šä¸€æ¬¡æ‰§è¡Œç»“æžœ
			File outfile = new File(localFileName);
			if (outfile.isDirectory() && localFileName.endsWith(File.separator)) {
				localFileName = localFileName + remoteFileName;
				outfile = new File(localFileName);
			} else if (outfile.isDirectory() && !localFileName.endsWith(File.separator)) {
				localFileName = localFileName + File.separator + remoteFileName;
				outfile = new File(localFileName);
			}
			OutputStream oStream = null;
			try {
				// åœ¨å¯¹ftpæœ?åŠ¡å™¨é?žæ ¹ç›®å½•ä¸‹çš„æ–‡ä»¶è¿›è¡Œæ“?ä½œçš„æ—¶å€™ä¸€å®šè¦?å…ˆè·³è½¬åˆ°ç›¸åº”çš„å·¥ä½œç›®å½•ä¸‹ï¼Œä¸?ç„¶retrieveFile()è¿”å›žçš„æ€»æ˜¯falseï¼Œå¦‚æžœæ“?ä½œçš„æ–‡ä»¶æ˜¯åœ¨æ ¹ç›®ä¸‹å°±å?¯ä»¥çœ?ç•¥è¿™ä¸€æ­¥
				ftpClient.changeWorkingDirectory(new String(fileDirPath.getBytes(local_fileEncoding), "ISO-8859-1"));
				oStream = new FileOutputStream(outfile);
				// æˆ‘ä»¬å?¯ä»¥ä½¿ç”¨BufferedOutputStreamè¿›è¡Œå°?è£…,å°?è£…æˆ?å…·æœ‰ç¼“å†²åŠŸèƒ½çš„æ–‡ä»¶è¾“å‡ºæµ?
				BufferedOutputStream bos = new BufferedOutputStream(oStream);
				flag = ftpClient.retrieveFile(
						new String(remoteFileName.getBytes(local_fileEncoding), FTP.DEFAULT_CONTROL_ENCODING), bos); // ä»Žæœ?åŠ¡å™¨æ£€ç´¢å‘½å??æ–‡ä»¶å¹¶å°†å…¶å†™å…¥ç»™å®šçš„OutputStreamä¸­,è¿™é‡Œå¿…é¡»å¯¹remoteFileNameè¿›è¡Œè½¬ç ?ï¼Œä¸?ç„¶å¤„ç?†ä¸?äº†ä¸­æ–‡æ–‡ä»¶å??
				bos.flush(); // å½“æˆ‘ä»¬ä½¿ç”¨è¾“å‡ºæµ?å?‘é€?æ•°æ?®æ—¶ï¼Œå½“æ•°æ?®ä¸?èƒ½å¡«æ»¡è¾“å‡ºæµ?çš„ç¼“å†²åŒºæ—¶ï¼Œè¿™æ—¶ï¼Œæ•°æ?®å°±ä¼šè¢«å­˜å‚¨åœ¨è¾“å‡ºæµ?çš„ç¼“å†²åŒºä¸­;å¦‚æžœï¼Œæˆ‘ä»¬è¿™ä¸ªæ—¶å€™è°ƒç”¨å…³é—­(close)è¾“å‡ºæµ?ï¼Œå­˜å‚¨åœ¨è¾“å‡ºæµ?çš„ç¼“å†²åŒºä¸­çš„æ•°æ?®å°±ä¼šä¸¢å¤±ã€‚æ‰€ä»¥è¯´ï¼Œå…³é—­(close)è¾“å‡ºæµ?æ—¶ï¼Œåº”å…ˆåˆ·æ–°(flush)æ?¢å†²çš„è¾“å‡ºæµ?
				if (flag) {
					if(fileDirPath.endsWith(File.separator)){
					    System.out.println("download ftp file: " + fileDirPath + remoteFileName + "   -- passed");
					}else{
						System.out.println("download ftp file: " + fileDirPath + File.separator + remoteFileName + "   -- passed");
					}
				} else {
					if(fileDirPath.endsWith(File.separator)){
					    System.err.println("download ftp file: " + fileDirPath + remoteFileName + "  -- No pass");
					}else{
						System.err.println("download ftp file: " + fileDirPath + File.separator + remoteFileName + "  -- No pass");
					}
					System.exit(1);
				}
			} catch (IOException e) {
				flag = false;
				return flag;
			} finally {
				oStream.close(); // å…³é—­æ–‡ä»¶è¾“å‡ºæµ?
			}
		} else {
			System.out.println("localpath cannot is empty!");
		}
		return flag;
	}

	/**
	 * 
	 * @param path
	 *            éœ€è¦?è¿›è¡Œreplaceçš„è·¯å¾„
	 * @return
	 */
	public String replace2Fileseparator(String path) {
		if (path != null && !path.equals("")) {
			if (path.contains("/")) {
				path = path.replace("/", File.separator);
			} else if (path.contains("\\\\")) {
				path = path.replace("\\\\", File.separator);
			}
		}
		return path;
	}

	/**
	 * 
	 * @param filePathOld   æœ¬åœ°file path
	 * @param filePathNew   ä»Žserverä¸Šdownload åˆ°æœ¬åœ°çš„file path
	 * @return
	 * @throws Exception
	 */
	public boolean getFileMD5(String filePathOld, String filePathNew) throws Exception {

		File fileOld = new File(filePathOld);
		File fileNew = new File(filePathNew);
		InputStream inputStreamOld = new FileInputStream(fileOld);
		InputStream inputStreamNew = new FileInputStream(fileNew);
		MessageDigest messageDigestOld = MessageDigest.getInstance("MD5");
		MessageDigest messageDigestNew = MessageDigest.getInstance("MD5");
		byte bufferOld[] = new byte[1024];
		int len;
		while ((len = inputStreamOld.read(bufferOld)) != -1) {
			messageDigestOld.update(bufferOld, 0, len);

		}
		while ((len = inputStreamNew.read(bufferOld)) != -1) {
			messageDigestNew.update(bufferOld, 0, len);

		}
		BigInteger bigIntegerOld = new BigInteger(1, messageDigestOld.digest());
		BigInteger bigIntegerNew = new BigInteger(1, messageDigestNew.digest());
		if (bigIntegerOld.toString().equals(bigIntegerNew.toString())) {
			System.out.println("compare file context : -- passed");
			return true;
		}
		System.err.println("compare file context : -- No pass");
		System.exit(1);
		return false;

	}

	/**
	 * compare the context structure if is same completed in old and new
	 * 
	 * @param ftpClientOld
	 * @param ftpClientNew
	 * @return
	 * @throws Exception
	 */

	List<String> retList = new ArrayList<String>();

	public List<String> getFileList(String path) throws IOException {
		retList.add(path);
		FTPFile[] ftpFiles = ftpClient.listFiles(path);
		if (ftpFiles == null || ftpFiles.length == 0) {
			return retList;
		}
		for (FTPFile ftpFile : ftpFiles) {
			if (ftpFile.isDirectory()) {
				if (path.endsWith(File.separator) || path.equals("/")) {
					getFileList(path + ftpFile.getName());
				} else {
					getFileList(path + File.separator + ftpFile.getName());
				}
			}
		}
		return retList;
	}

}
